"""
Steepest descent on the ROHF manifold with Armijo linesearch.

Parameters are

<><> General
- Σ: the chemical system of the computation
- max_iter: maximum number of preconditionned SD iterations
- cv_threshold: convergence threshold on the norm of the projected gradient.
 Should be 0 on a minimum.
- max_step: maximum step size
- ρ ∈ (0,1): parameter of the Armijo linesearch. If α does not verify the Armijo condition,
     the next try is ρ*α

<><> Print and save data
- verbosity ∈ ("high", "medium", "head", "tail")
    -> high prints every informations
    -> head prints every thing except the tail
    -> tail doesn't print the head 
    -> medium only print the iterations without head or tail.
- save_MOs & MOs_dir: if true, save the MOs at each iterations in the dir MOs_dir/
    Usefull to be able to exit stop a computation without any data loss.
- Σ_name: name of the system appearing in the MOs files generated by save_MOs

<><> Starting MOs
- Φ_init: initial MOs for the computation. Useful to set other
 guesses than core hamiltonian.
 If none are given, starting MOs are the one stored in Σ.
- restart: if true, set the orbitals stored in Σ as the core hamiltonian guess/
"""
function rohf_SD(Σ::ChemicalSystem;
                 Φ_init = zero(Σ.overlap_matrix),
                 max_iter = 500,
                 max_step = 2*one(Float64), ρ = 0.5,
                 cv_threshold = 1e-5,
                 verbosity = "high", save_MOs = false,
                 MOs_dir = "out",
                 Σ_name = "steepest_descent",
                 restart = false,
                 linesearch_type = BackTracking(order=3),
                 )

    (typeof(max_step)≠Float64) && (max_step = Float64(max_step))
    
    (cv_threshold > 1e-4) && @warn("Warning: the convergence threshold is low and"*
                                   " will induce lower precision.")
    tic = now()
    @assert( verbosity ∈ ("high", "head", "tail", "medium", "none") )
    
    # Write head
    if( verbosity ∈ ("high", "head") )
        println("Computation started at $(tic)"*"\n")
        println("Minimization of the energy on the ROHF manifold")
        (verbosity =="high") && (println("Parameters: max_iter = $max_iter, linesearch = $(linesearch_type)"))
        (verbosity =="high") &&
            (println("Stopping criteria: ||Π∇E|| < $(cv_threshold)"*"\n"));
        flush(stdout);      
    end

    # Extract system informations
    N_bds, A, S, H, atom_info = read_system(Σ)
    S12 = sqrt(Symmetric(S)); Sm12=inv(S12);

    # Extract initial MOs from Σ and orthogonalise.
    if( iszero(Φ_init) )
        (restart) && (reset_system!(Σ))
        Φ_init = Σ.MOs
    end
    (restart) && (reset_system!(Σ))
    ΦT = ortho_AO(Φ_init, S12)
    
    if save_MOs
        !(isdir("$(MOs_dir)")) && (mkdir("$(MOs_dir)"))
    end
    
    # Initial data
    E, ∇E = compute_energy_and_gradient(ΦT, Sm12, A, H, N_bds, atom_info=atom_info)
    E_previous = E; p = .- ∇E
    δE = zero(E); norm_residual = zero(E)
    step = zero(Float64)

    # Print initial infos
    if !(verbosity == "none")
        (verbosity ∈ ("high","head")) && (println("Guess energy : $(E_previous) \n"))
        println("-"^65)
        println(@sprintf("%-16s  %-16s  %-16s  %-5s  %-5s","Energy","δE",
                         "||Π∇E||", "Step", "Iter"))
        println("-"^65)
        flush(stdout)
    end

    iter, computation_time = Σ.iter_and_time
    converged = false;
    
    while (!converged & (iter < max_iter))
        iter += 1;
        # k -> k+1
        step, E, ΦT = line_search(ΦT, p, Sm12, A, H, N_bds,
                                 atom_info = atom_info,
                                 E = E, ∇E = ∇E,
                                 max_step = max_step, ρ = ρ,
                                 linesearch_type = linesearch_type)
                                         

        @assert( test_MOs(ΦT, N_bds) < 1e-10 )

        δE = E - E_previous
        E_previous = E

        # New gradient and direction
        ∇E = grad_E_MO_metric(ΦT, Sm12, A, H, N_bds)
        p = .- ∇E
        norm_residual = norm(∇E)
        
        if( norm_residual < cv_threshold )
            converged = true
        end
        
        # Save current MOs if needed
        (save_MOs) && (save_MOs_in_file(Sm12*ΦT, "$(MOs_dir)/MOs_$(Σ_name)_$(iter)";
                                        E = E, iter = iter))

        # Print infos at k+1
        if !(verbosity == "none")
            println(@sprintf("%16.12f %16.12f %16.12f  %1.5f %5i  | SD",
                             E, δE, norm_residual, step, iter))
            flush(stdout)
        end

        # Actualize system's infos
        Φ = Sm12*ΦT # De-orthonormalize MOs
        Σ.MOs = Φ; Σ.E_rohf = E
        Σ.iter_and_time = (iter,computation_time)
        Σ.cv_history = (converged, norm_residual)
    end

    if( verbosity ∈ ("high","tail") )
        (converged)  && println("-"^65*"\n"*"CONVERGED")
        !(converged) && println("----Maximum iteration reached")
        println(@sprintf("%16.12f %16.12f %16.12f  %1.5f %5i",E, δE, norm_residual, step, iter))
        flush(stdout)
    end
    
    toc = now()
    computation_time += toc - tic

    if( verbosity ∈ ("high","tail") )
        println("\n"^2*"Process ended at $(toc)")
        println("Computation time: $(computation_time)"*"\n")
        flush(stdout)
    end

    Φ = Sm12*ΦT # De-orthonomalize the result
    
    # Store final data in the chemical system structure
    Σ.MOs = Φ; Σ.E_rohf = E
    Σ.iter_and_time = (iter,computation_time)
    Σ.cv_history = (converged, norm_residual)

    Σ
end
