"""
Standard fixed depth DIIS as described e.g. in [https://doi.org/10.1051/m2an/2021069]
(Its a review, see Pulay for the introduction of DIIS I think)
"""
mutable struct DIIS
    m::Int                            # maximal history size
    d_densities::Vector{Any}             # [P‚Çô, P‚Çô‚Çã‚ÇÅ, ...]
    s_densities::Vector{Any}
    residuals::Vector{Any}            # [r‚Çô, r‚Çô‚Çã‚ÇÅ, ...]
end
DIIS(;m=10) = DIIS(m, [], [], [])

# Actualize diis lists and remove old iterates if needed
function Base.push!(diis::DIIS, Pd‚Çô, Ps‚Çô, R‚Çô)
    push!(diis.d_densities,  vec(Pd‚Çô))
    push!(diis.s_densities, vec(Ps‚Çô))
    push!(diis.residuals, vec(R‚Çô))
    if length(diis.d_densities) > diis.m + 1
        popfirst!(diis.d_densities)
        popfirst!(diis.s_densities)
        popfirst!(diis.residuals)
    end
    @assert length(diis.d_densities) <= diis.m + 1
    @assert length(diis.d_densities) == length(diis.residuals)
    diis
end

function (diis::DIIS)(x‚Çô, R‚Çô; info)
    Nb, Nd, Ns = info.Œ∂.M.mo_numbers

    # Special case, no DIIS
    (diis.m == 0) && return x‚Çô

    # First iteration
    if isempty(diis.d_densities)
        Pd‚Çô, Ps‚Çô = densities(x‚Çô, (Nb, Nd, Ns))
        push!(diis, Pd‚Çô, Ps‚Çô, R‚Çô)
        return x‚Çô
    end

    # Subsequant iterations
    Pd‚Çô, Ps‚Çô = densities(x‚Çô, (Nb, Nd, Ns)) 
    push!(diis, Pd‚Çô, Ps‚Çô, R‚Çô)
    ùêèd = diis.d_densities
    ùêès = diis.s_densities
    ùêë = diis.residuals

    # Solve DIIS least square pb on densities
    # Rq: We consider densities because the DIIS point on MOs
    # is too far from the manifold.
    ùêí = hcat([ùêë[i+1] - ùêë[i] for i in 1:length(ùêë)-1]...)
    A = ùêí'ùêí
    B = ùêí'vec(R‚Çô)
    Œ± = A\B

    # Assemble next point
    ùêèd_diff = hcat([ùêèd[i+1] - ùêèd[i] for i in 1:length(ùêèd)-1]...)
    ùêès_diff = hcat([ùêès[i+1] - ùêès[i] for i in 1:length(ùêès)-1]...)
    Pd‚Çô‚Çä‚ÇÅ = vec(Pd‚Çô) - sum(eachcol(Œ±' .* ùêèd_diff))
    Ps‚Çô‚Çä‚ÇÅ = vec(Ps‚Çô) - sum(eachcol(Œ±' .* ùêès_diff))
    Pd‚Çô‚Çä‚ÇÅ = reshape(Pd‚Çô‚Çä‚ÇÅ, Nb, Nb); Ps‚Çô‚Çä‚ÇÅ = reshape(Ps‚Çô‚Çä‚ÇÅ, Nb, Nb)
    x‚Çô‚Çä‚ÇÅ = hcat(eigen(-Symmetric(Pd‚Çô‚Çä‚ÇÅ)).vectors[:,1:Nd],
                eigen(-Symmetric(Ps‚Çô‚Çä‚ÇÅ)).vectors[:,1:Ns])
    if !isempty(info)
        (test_MOs(x‚Çô‚Çä‚ÇÅ, (Nb,Nd,Ns)) > 1e-8) && (@warn "DIIS MOs may be too far from"*
                                 " the Manifold. Try launching DIIS closer to a minimum")
    end
    x‚Çô‚Çä‚ÇÅ
end
