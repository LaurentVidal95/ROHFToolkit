#
# Contains DIIS and ODA interpolation techniques
#
import Base.collect

@doc raw"""
     DIIS(m::Int, iterates::Vector{Any}, residuals::Vector{Any})

Standard fixed depth DIIS as described e.g. in [https://doi.org/10.1051/m2an/2021069]
Note that DIIS is applied in DM conventions.
"""
struct DIIS
    m::Int                            # maximal history size
    iterates::Vector{Any}             # x‚Çô
    residuals::Vector{Any}            # r‚Çô
end
DIIS(;m=10) = DIIS(m, [], [])
depth(diis::DIIS) = length(diis.iterates)

# Actualize diis lists and remove old iterates if needed
function Base.push!(diis::DIIS, Pd‚Çô, Ps‚Çô, R‚Çô)
    push!(diis.iterates,  (Pd‚Çô, Ps‚Çô))
    push!(diis.residuals, vec(R‚Çô))
    if depth(diis) > diis.m + 1
        popfirst!(diis.iterates)
        popfirst!(diis.residuals)
    end
    @assert depth(diis) <= diis.m + 1
    @assert length(diis.residuals) == depth(diis)
    diis
end

@doc raw"""
    diis(info)

Returns the DIIS extrapolated densities and corresponding Fock operators
from densities contained in info and history in the DIIS struct.
"""
function (diis::DIIS)(info)
    Pd‚Çô, Ps‚Çô = info.DMs
    R‚Çô = info.‚àáE
    
    # Special case, no DIIS.
    (diis.m == 0) && return (Pd‚Çô, Ps‚Çô, Fock_operators(Pd‚Çô, Ps‚Çô, info.Œ∂)...)
    # First iteration
    if isempty(diis.iterates)
        push!(diis, Pd‚Çô, Ps‚Çô, R‚Çô)
        return Pd‚Çô, Ps‚Çô,  Fock_operators(Pd‚Çô, Ps‚Çô, info.Œ∂)...
    end

    push!(diis, Pd‚Çô, Ps‚Çô, R‚Çô)
    ùêè = diis.iterates
    ùêë = diis.residuals
    ùêí = hcat([ùêë[i+1] - ùêë[i] for i in 1:length(ùêë)-1]...)

    # Solve DIIS least square PB
    A = ùêí'ùêí
    B = ùêí'ùêë[end]
    C = A\B

    ùêèd_diff = [ùêè[i+1][1] - ùêè[i][1] for i in 1:length(ùêè)-1]
    ùêès_diff = [ùêè[i+1][2] - ùêè[i][2] for i in 1:length(ùêè)-1]
    Pd_diis = Pd‚Çô - C'ùêèd_diff
    Ps_diis = Ps‚Çô - C'ùêès_diff
    Pd_diis, Ps_diis, Fock_operators(Pd_diis, Ps_diis, info.Œ∂)...
end

@doc raw"""
    ODA(densities::Matrix{T}, Fock_operators::Matrix{T}) where {T}

Relaxed constrained interpolation of densities and Fock operators or "ODA".
Have to work with hybrid_scf solver. Kind of bugged for now but used to
work before changing the structure.
"""
mutable struct ODA{T}
    densities::Matrix{T}      # (Pd‚Çô·∂ú|Ps‚Çô·∂ú)
    Fock_operators::Matrix{T} # (Fd‚Çô·∂ú|Fs‚Çô·∂ú)
end
ODA(;T=Float64) = ODA(T[;;],T[;;])

function collect(oda::ODA)
    DMs = oda.densities
    Focks = oda.Fock_operators
    Nb = size(DMs,1)
    Pd, Ps = DMs[:,1:Nb], DMs[:,Nb+1:end]
    Fd, Fs = Focks[:,1:Nb], Focks[:,Nb+1:end]
    (Pd, Ps), (Fd, Fs)
end

function (oda::ODA{T})(info) where {T<:Real}
    Pd‚Çô‚Çä‚ÇÅ, Ps‚Çô‚Çä‚ÇÅ = info.DMs

    # First iteration
    if isempty(oda.densities)
        Fd‚Çô‚Çä‚ÇÅ, Fs‚Çô‚Çä‚ÇÅ = Fock_operators(Pd‚Çô‚Çä‚ÇÅ, Ps‚Çô‚Çä‚ÇÅ, info.Œ∂)
        oda.densities = hcat(Pd‚Çô‚Çä‚ÇÅ, Ps‚Çô‚Çä‚ÇÅ); oda.Fock_operators = hcat(Fd‚Çô‚Çä‚ÇÅ, Fs‚Çô‚Çä‚ÇÅ)
        return (Pd‚Çô‚Çä‚ÇÅ, Ps‚Çô‚Çä‚ÇÅ, Fd‚Çô‚Çä‚ÇÅ, Fs‚Çô‚Çä‚ÇÅ)
    end

    # Subsequent iterations
    (Pd‚Çô·∂ú, Ps‚Çô·∂ú), (Fd‚Çô·∂ú, Fs‚Çô·∂ú) = collect(oda)

    # Compute new convex combination
    c‚ÇÅ, c‚ÇÇ, Fd‚Çô‚Çä‚ÇÅ, Fs‚Çô‚Çä‚ÇÅ = oda_polynom_coefficients(Pd‚Çô·∂ú, Ps‚Çô·∂ú, Fd‚Çô·∂ú, Fs‚Çô·∂ú,
                                                    Pd‚Çô‚Çä‚ÇÅ, Ps‚Çô‚Çä‚ÇÅ, info.Œ∂)
    t = oda_convex_combination_param(c‚ÇÅ, c‚ÇÇ) # Add changing guess if t=0
    Pd‚Çô‚Çä‚ÇÅ·∂ú = (1-t)*Pd‚Çô·∂ú + t*Pd‚Çô‚Çä‚ÇÅ
    Ps‚Çô‚Çä‚ÇÅ·∂ú = (1-t)*Ps‚Çô·∂ú + t*Ps‚Çô‚Çä‚ÇÅ
    Fd‚Çô‚Çä‚ÇÅ·∂ú = (1-t)*Fd‚Çô·∂ú + t*Fd‚Çô‚Çä‚ÇÅ
    Fs‚Çô‚Çä‚ÇÅ·∂ú = (1-t)*Fs‚Çô·∂ú + t*Fs‚Çô‚Çä‚ÇÅ
    oda.densities = hcat(Pd‚Çô‚Çä‚ÇÅ·∂ú , Ps‚Çô‚Çä‚ÇÅ·∂ú); oda.Fock_operators = hcat(Fd‚Çô‚Çä‚ÇÅ·∂ú ,Fs‚Çô‚Çä‚ÇÅ·∂ú)
    Pd‚Çô‚Çä‚ÇÅ·∂ú, Ps‚Çô‚Çä‚ÇÅ·∂ú, Fd‚Çô‚Çä‚ÇÅ·∂ú, Fs‚Çô‚Çä‚ÇÅ·∂ú
end

"""
Find the t_min ‚àà [0,1] that minimizes the polynom c‚ÇÅ*x^2 + c‚ÇÇ*x + c‚ÇÉ
Note that t_min is independant of c‚ÇÉ
"""
function oda_convex_combination_param(c‚ÇÅ::T, c‚ÇÇ::T) where {T<:Real}
    t_min = zero(Int64)
    t_extremum = -c‚ÇÇ/(2*c‚ÇÅ) # t that gives the global min or max of the polynom
    if c‚ÇÅ > 0
        (t_extremum ‚â§ 0) && (t_min = zero(T))
        (t_extremum ‚â• 1) && (t_min = one(T))
        (0 < t_extremum < 1) && (t_min = t_extremum)
    elseif c‚ÇÅ == 0
        (c‚ÇÇ > 0) && (t_min = zero(T))
        (c‚ÇÇ < 0) && (t_min = one(T))
    else #c‚ÇÅ < 0
        (t_extremum < 0.5) && (t_min = one(T))
        (t_extremum > 0.5) && (t_min = zero(T))
        (t_extremum == 0.5) && (t_min = t_extremum)
    end
    iszero(t_min) && (@warn "Coefficient of the convex combination is 0.."*
                      " Changin guess of the subproblem.")
    @show t_min
end
"""
   oda_polynom_coefficients(Pd‚Çô·∂ú::Matrix{T}, Ps‚Çô·∂ú::Matrix{T}, Fd‚Çô·∂ú::Matrix{T},
                                  Fs‚Çô·∂ú::Matrix{T}, Pd‚Çô‚Çä‚ÇÅ::Matrix{T}, Ps‚Çô‚Çä‚ÇÅ::Matrix{T},
                                  Œ∂::State) where {T<:Real}

Build c‚ÇÅ, c‚ÇÇ such that
```math
  E((1-t)(Pd‚Çô·∂ú,Ps‚Çô·∂ú) + t(Pd‚Çô‚Çä‚ÇÅ,Ps‚Çô‚Çä‚ÇÅ)) = c‚ÇÅ*t¬≤ + c‚ÇÇ*t + c‚ÇÉ.
```
We have:
  - ``c‚ÇÅ = (Pd‚Çô‚Çä‚ÇÅ-Pd‚Çô·∂ú, Ps‚Çô‚Çä‚ÇÅ-Ps‚Çô·∂ú) ‚ãÖ (Fd‚Çô‚Çä‚ÇÅ-Fd‚Çô·∂ú, Fs‚Çô‚Çä‚ÇÅ-Fs‚Çô·∂ú)``
  - ``c‚ÇÇ = 2(Pd‚Çô‚Çä‚ÇÅ-Pd‚Çô·∂ú, Ps‚Çô‚Çä‚ÇÅ-Ps‚Çô·∂ú) ‚ãÖ (Fd, Fs)``
  - ``c‚ÇÉ = E(Pd‚Çô·∂ú, Ps‚Çô·∂ú)`` is not usefull hence not computed

Also returns Fd‚Çô‚Çä‚ÇÅ and Fs‚Çô‚Çä‚ÇÅ to avoid unnecessary computations.
"""
function oda_polynom_coefficients(Pd‚Çô·∂ú::Matrix{T}, Ps‚Çô·∂ú::Matrix{T}, Fd‚Çô·∂ú::Matrix{T},
                                  Fs‚Çô·∂ú::Matrix{T}, Pd‚Çô‚Çä‚ÇÅ::Matrix{T}, Ps‚Çô‚Çä‚ÇÅ::Matrix{T},
                                  Œ∂::State) where {T<:Real}
    Fd‚Çô‚Çä‚ÇÅ, Fs‚Çô‚Çä‚ÇÅ = Fock_operators(Pd‚Çô‚Çä‚ÇÅ, Ps‚Çô‚Çä‚ÇÅ, Œ∂)
    Md =  Pd‚Çô‚Çä‚ÇÅ - Pd‚Çô·∂ú; Ms = Ps‚Çô‚Çä‚ÇÅ - Ps‚Çô·∂ú
    c‚ÇÅ = tr(Md'*(Fd‚Çô‚Çä‚ÇÅ-Fd‚Çô·∂ú) + Ms'*(Fs‚Çô‚Çä‚ÇÅ-Fs‚Çô·∂ú))
    c‚ÇÇ = 2*tr(Md'Fd‚Çô·∂ú + Ms'Fs‚Çô·∂ú)
    c‚ÇÅ, c‚ÇÇ, Fd‚Çô‚Çä‚ÇÅ, Fs‚Çô‚Çä‚ÇÅ
end
